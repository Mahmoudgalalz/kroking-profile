---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = "Mahmoud Galal's website",
	description = "I'm a Software Engineer and Open-source contributor",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<meta property="og:title" content={description} />
<meta property="og:type" content="profile" />
<meta property="og:image" content="https://kroking.dev/assets/og_banner.png" />
<meta property="og:url" content="https://www.kroking.dev" />

<meta property="og:site_name" content="Mahmoud Galal" />
<meta property="og:description" content={description}/>
<meta property="article:publisher" content="https://www.kroking.dev" />
<meta property="og:image" content="https://kroking.dev/assets/og_banner.png" />
<meta property="og:image:secure_url" content="/assets/og.png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://kroking.dev/assets/og_banner.png" />
<meta property="twitter:site" content="@eitmg" />

<meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content={title}>
    <meta name="twitter:description" content={description}>
    <meta name="twitter:image" content={`https://kroking.dev/assets/og_banner.png`}>
    <meta name='twitter:creator' content='@eitmg'/>
    <meta name='twitter:site' content="@eitmg"/>
    <meta name='twitter:domain' content='https://kroking.dev/assets/og_banner.png'/>
    <meta property='og:image:width' content='1200' />
    <meta property='og:image:height' content='600' />
    <meta property='og:image' itemprop="image" content={`https://kroking.dev/assets/og_banner.png`} />
    <meta property='og:image:alt' content='KrokKing' />
    <meta property='og:site_name' content='KrokKing' />
    <meta property='og:title' content={title} />
    <meta property='og:description' content={description} />
    <meta property='og:type' content='website' />
    <meta property='og:url' content="https://kroking.dev/assets/og_banner.png" />
    <link rel='canonical' href="https://kroking.dev/assets/og_banner.png" />
    <meta name='mobile-web-app-capable' content='yes' />
    <meta itemprop="url" content="https://kroking.dev/assets/og_banner.png"/>
    <meta itemprop="name" content="KrokKing"/>
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
